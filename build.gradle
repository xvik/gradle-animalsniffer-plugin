import org.gradle.api.attributes.java.TargetJvmVersion

plugins {
    id 'com.gradle.plugin-publish' version '1.3.1'
    id 'java-gradle-plugin'
    id 'groovy'
    id 'jacoco'
    id 'signing'
    id 'net.researchgate.release' version '3.1.0'
    id 'ru.vyarus.quality' version '5.0.0'
    id 'io.github.gradle-nexus.publish-plugin' version '2.0.0'
    id 'ru.vyarus.java-lib' version '3.0.0'
    id 'ru.vyarus.github-info' version '2.0.0'
    id 'com.github.ben-manes.versions' version '0.52.0'
    id "pl.droidsonroids.jacoco.testkit" version "1.0.12"
    id 'ru.vyarus.mkdocs' version '4.0.1'
}

java {
    sourceCompatibility = 1.8
}

wrapper {
    gradleVersion = '8.12'
    distributionType = Wrapper.DistributionType.BIN
}

ext {
    animalsnifferVersion = '1.24'
}

// workaround to keep compileOnly android dependency together with target jdk 1.8
// attributes: https://docs.gradle.org/current/userguide/variant_attributes.html
// definition example https://docs.gradle.org/current/userguide/variant_aware_resolution.html#2_create_a_custom_outgoing_configuration
configurations.compileClasspath.attributes.attribute(TargetJvmVersion.TARGET_JVM_VERSION_ATTRIBUTE, 11)

repositories { mavenLocal(); mavenCentral(); google(); gradlePluginPortal() }
dependencies {
    // required for helper tasks, but check and build would use dynamic classpath
    implementation "org.codehaus.mojo:animal-sniffer:$animalsnifferVersion"
    // required to replace deprecated gradle GFileUtils
    implementation 'commons-io:commons-io:2.20.0'
    compileOnly 'com.android.tools.build:gradle:8.12.1'
    compileOnly 'org.jetbrains.kotlin:kotlin-gradle-plugin:2.0.21'

    testImplementation 'io.github.java-diff-utils:java-diff-utils:4.16'
    testImplementation('org.spockframework:spock-core:2.3-groovy-3.0') {
        exclude group: 'org.codehaus.groovy'
    }
}

group = 'ru.vyarus'
description = 'Gradle AnimalSniffer plugin'

github {
    user 'xvik'
    license 'MIT'
}

mkdocs {
    extras = [
        'version': '2.0.1',
        'animalsnifferVersion': project.animalsnifferVersion
    ]
    publish {
        docPath = mkdocs.extras['version']
        rootRedirect = true
        rootRedirectTo = 'latest'
        versionAliases = ['latest']
        hideOldBugfixVersions = true
    }
}

maven.pom {
    developers {
        developer {
            id = 'xvik'
            name = 'Vyacheslav Rusakov'
            email = 'vyarus@gmail.com'
        }
    }
}

nexusPublishing {
    repositories {
        sonatype {
            username = findProperty('sonatypeUser')
            password = findProperty('sonatypePassword')
        }
    }
}

if (System.getenv("SNAPSHOT")) {
    // https://docs.github.com/en/actions/use-cases-and-examples/publishing-packages/publishing-java-packages-with-gradle#publishing-packages-to-github-packages
    publishing {
        repositories {
            maven {
                name = "GitHub"
                url = "https://maven.pkg.github.com/xvik/gradle-animalsniffer-plugin"
                credentials {
                    username = System.getenv("GITHUB_ACTOR")
                    password = System.getenv("GITHUB_TOKEN")
                }
            }
        }
    }
}

// skip signing for jitpack (snapshots)
tasks.withType(Sign) { onlyIf { !(System.getenv('JITPACK') || System.getenv('SNAPSHOT')) }}

// Required signing properties for release: signing.keyId, signing.password and signing.secretKeyRingFile
// (https://docs.gradle.org/current/userguide/signing_plugin.html#sec:signatory_credentials)

javaLib {
    // don't publish gradle metadata artifact
    withoutGradleMetadata()
}

gradlePlugin {
    plugins {
        animalsnifferPlugin {
            id = 'ru.vyarus.animalsniffer'
            displayName = project.description
            description = 'Gradle AnimalSniffer plugin for Java, Groovy, Kotlin and Scala projects'
            tags.set(['animalsniffer'])
            implementationClass = 'ru.vyarus.gradle.plugin.animalsniffer.AnimalSnifferPlugin'
        }
    }
}

release.git.requireBranch.set('master')

afterReleaseBuild {
    dependsOn = [
            'publishMavenPublicationToSonatypeRepository',
            'closeAndReleaseSonatypeStagingRepository',
            publishPlugins]
    doLast {
        logger.warn "RELEASED $project.group:$project.name:$project.version"
    }
}

test {
    useJUnitPlatform()
    testLogging {
        events 'skipped', 'failed'
        exceptionFormat 'full'
    }
    maxHeapSize = '512m'
    doLast {
        sleep(1000)
    }
    systemProperty 'jna.nosys', 'true'
}

dependencyUpdates.revision = 'release'
